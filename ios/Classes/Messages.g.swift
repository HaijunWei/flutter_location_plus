// Autogenerated from Pigeon (v14.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct Location {
  var latitude: Double
  var longitude: Double
  var country: String
  var province: String
  var city: String
  var direction: String

  static func fromList(_ list: [Any?]) -> Location? {
    let latitude = list[0] as! Double
    let longitude = list[1] as! Double
    let country = list[2] as! String
    let province = list[3] as! String
    let city = list[4] as! String
    let direction = list[5] as! String

    return Location(
      latitude: latitude,
      longitude: longitude,
      country: country,
      province: province,
      city: city,
      direction: direction
    )
  }
  func toList() -> [Any?] {
    return [
      latitude,
      longitude,
      country,
      province,
      city,
      direction,
    ]
  }
}

private class LocationPlusCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return Location.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class LocationPlusCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? Location {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class LocationPlusCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return LocationPlusCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return LocationPlusCodecWriter(data: data)
  }
}

class LocationPlusCodec: FlutterStandardMessageCodec {
  static let shared = LocationPlusCodec(readerWriter: LocationPlusCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol LocationPlus {
  func startUpdatingLocation() throws
  func stopUpdatingLocation() throws
  func requestSingleLocation(completion: @escaping (Result<Location, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class LocationPlusSetup {
  /// The codec used by LocationPlus.
  static var codec: FlutterStandardMessageCodec { LocationPlusCodec.shared }
  /// Sets up an instance of `LocationPlus` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: LocationPlus?) {
    let startUpdatingLocationChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.location_plus.LocationPlus.startUpdatingLocation", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startUpdatingLocationChannel.setMessageHandler { _, reply in
        do {
          try api.startUpdatingLocation()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      startUpdatingLocationChannel.setMessageHandler(nil)
    }
    let stopUpdatingLocationChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.location_plus.LocationPlus.stopUpdatingLocation", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopUpdatingLocationChannel.setMessageHandler { _, reply in
        do {
          try api.stopUpdatingLocation()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      stopUpdatingLocationChannel.setMessageHandler(nil)
    }
    let requestSingleLocationChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.location_plus.LocationPlus.requestSingleLocation", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      requestSingleLocationChannel.setMessageHandler { _, reply in
        api.requestSingleLocation() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      requestSingleLocationChannel.setMessageHandler(nil)
    }
  }
}
